local alts = {
"Xt4vTXO3",
"YScTGiMo",
"HbvV6RzN",
"mytyGzHI",
"yPfdQYEX",
"M4ECJHPw",
"sSxJK66U",
"sqdqwy1J",
"TNardAeJ",
"qrFu0D27",
"wIHeqDmE",
"D5uDChPI",
"yanWrEBS",
"Wu9rr1U5",
"Y41zG27M",
"jEm7RymY",
"PzwoRRo9",
"zrAhWZwa",
"sfRFsQRQ",
"aKj1ODjc",
"Lx9TG79Q",
"DvhIniaw",
"JGyb5pJK",
"NGTzVkeP",
"f0BtnQvR",
"iG4UVP0U",
"VW2H2LHT",
"U6QH0Rfk",
"MsGGMhTr",
"I73OIIMf",
"PUVg6iCA",
"qkN8VJ8y",
"IsgyPtr1",
"s6RtFnFX",
"VtGVWfSW",
"lL5yZYHb",
"qZfj51ER",
"V0FvYwbB",
"aEOOyjcr",
"Xu59BltT",
"Lz7ca5wP",
"Ay1dUsVM",
"ws6wCvfe",
"ddrq0SEh",
"gOiD4u6s",
"dN0u6wmY",
"PMPD5NV3",
"Kp4I8j4z",
"sNRYYM2j",
"A0ZGRLPN",
"J7xaFOjw",
"SmLziXPy",
"NvddDKjs",
"dARkatlM",
"eeSl4Tla",
"wCJJTZbo",
"s4kI2LIO",
"Kbzabyxh",
"IouE3V7C",
"L6P5kLy7",
"QRZvedwO",
"F8cwuZf7",
"gifINkZx",
"wHia9D0F",
"MYgIK4PK",
"xa1D4MI3",
"kgC583E0",
"crd7xEPI",
"KmPPzr5Q",
"LfAw8MU4",
"PH4A4BGM",
"thfm9vrC",
"ezRa3yOI",
"mhdnb926",
"Vmy57ix8",
"SKv4rtLq",
"JvR3hWUS",
"tSLzEcD3",
"iCpE0QjE",
"vADkQqEG",
"AeWiFir2",
"eyYyNxEA",
"ElBjQuVb",
"eKlapevP",
"ch1i6oRj",
"IPQ0lb2g",
"AJT3NBPO",
"fKe5HKgu",
"rQVhmrLK",
"XRh6pxbp",
"aVZz98M2",
"VuA55bXV",
"TTV4ZOvr",
"haGE4Stu",
"seRmTcjp",
"ahtgtEiI",
"hS40B34V",
"f91N1QuM",
"Ptu0QXFW",
"oLQOZREQ",
"uCavxQyq",
"FubyisKX",
"dcItpKSa",
"kyKvdeFZ",
"hZIBvSV3",
"IfbO7Rd4",
"n7JUZmkN",
"pssmNhFO",
"cDYZV2P5",
"EicbmaJa",
"IKEw7Bv1",
"il6DMPSF",
"T1exOb3m",
"mLwDDCaY",
"Btf3kFTe",
"lrJIGOwL",
"oqM9BoNT",
"kga42HB4",
"WTk9xZDR",
"DuVuvejJ",
"h35dmco2",
"kQWgnWlE",
"P3uscftg",
"QzkEtUdi",
"itU9JxuN",
"vUeVr9w6",
"pBfbE4p3",
"qqEYTJSx",
"O4OzK1ut",
"W6Tl20Sa",
"piJz0Jo9",
"To9RmD6E",
"jSs5wDjJ",
"BnrKDSW7",
"ASdhj6sH",
"zWOJXrO6",
"qp9mAGHk",
"aQCCgAmf",
"I5pVR13s",
"gp6kYXho",
"WwIEisqm",
"ZjVdvLFs",
"pqji0y66",
"GGGrIRpE",
"baJb0d2E",
"ZTDRiAJz",
"EXbJBjRK",
"GQw91dEn",
"kuZwP07W",
"PM83W22R",
"DVtdMtYA",
"LXxaJAWb",
"Vfj14rw8",
"K3lyBjqh",
"HT9eNB4H",
"O4Rtk4d8",
"lgZCuXB0",
"jmcwT2kp",
"jaFbzRyl",
"tCiOKTBI",
"MixZdxb7",
"RNY8njav",
"Rrd1pUa0",
"EdSDOPBa",
"Q3SHVG4n",
"aoHJaGEZ",
"FpcMYytt",
"UDZu8c5V",
"y0X0nrvy",
"ra3ocHnk",
"JvZ7fr7J",
"SrhWNqtQ",
"fbiSRTQX",
"CbEsHp9s",
"SaWUrRis",
"gIlJ5zkm",
"mQI5lK3K",
"f2p4lmvb",
"gExaOjCn",
"nbuudtDh",
"wja7sEyq",
"wgL8N31Z",
"MeB7YQZ3",
"H2li8Zce",
"rvixGers",
"PTgnZ211",
"nA4w7lKY",
"SGCaqoiY",
"PnMVzXWy",
"TpRX9mWF",
"CTbdR12u",
"vt0rerX0",
"DKd9zlPN",
"XtP2XNRl",
"NEhnSDtz",
"QcSVgMVY",
"lZC7FrQl",
"jZy53uh7",
"QSrgxsQ8",
"Eyb5wWEJ",
"TLuWtxIR",
"jj4ccMli",
"gJmGGtNh",
"jGrMA9Hq",
"mENbPXmz",
"ZXPLr6pX",
"HuAgbh8i",
"q9nXXjk0",
"V9ncAyQT",
"vkOLD4JC",
"eTS3OnCQ",
"KhLhSy2p",
"bfNzHH7P",
"ylfvSI4D",
"AdxP0kN5",
"dKP0ap3R",
"QbpE8rZJ",
"a150uZ8d",
"qdRIkDob",
"LlO9Rzhz",
"CECf28ij",
"qrJ5nskw",
"iviGZl86",
"AwvbAeQV",
"TompQoYw",
"BNQqHttO",
"PNp2zFkn",
"y4NpdR7I",
"HUGW0gAu",
"UwDu0RWK",
"kkp9PcxI",
"FN4jH0hu",
"KFTaaEaG",
"UtUJlTWI",
"SR3fE8r1",
"LvFGNIPt",
"sxNDUWF9",
"KdXQl66L",
"ZZSIXUf3",
"YNCNpHpu",
"jeyjsaM8",
"HAnrXvDB",
"RW4NlOll",
"GZUi8MHN",
"OWH0Ta0r",
"HJ1VyuJp",
"EoTccXf0",
"S3FDNj2M",
"HscPoB3Z",
"tUaCRmQI",
"JR06N0QA",
"DnkIq5k5",
"qXgERgsm",
"KVuO4jYL",
"vFEupEwq",
"dnVgkGUD",
"nMZGldAt",
"x2B5F8fH",
"LOcl7577",
"ylfgaHbz",
"KNh6JY4D",
"mUudF6h2",
"wUQqJacJ",
"CANGDE3l",
"HMzzG60K",
"HxjIs1qD",
"NZD3bGAp",
"KKLXZ674",
"S105JEcv",
"RKlmlPDP",
"ik4cR7Hy",
"LjELL63S",
"hFM4Y3nf",
"FwOn6zVP",
"bMVJE84o",
"UIyDJfeT",
"SoiFm1FS",
"LkskQvw3",
"TibrsATA",
"fV7eMZek",
"zVlTrAZj",
"ASSxWxSn",
"YJDKcZts",
"orT5FZyp",
"eQcyJKYm",
"jRLlOKih",
"mqJx5SoD",
"UatTe3Qs",
"LETw2jrT",
"fviTdm3c",
"aeSb6qny",
"BVrhwW4H",
"ku1pO54m",
"kXDAO8Az",
"pwCPhBfG",
"WkProcyf",
"rTRCLpmL",
"KJKOpsJv",
"wDFcAydN",
"ZHh5hKwF",
"j8hcacs8",
"goLyKp4g",
"oqErHwqD",
"jcMMrNj4",
"EXU1xO5w",
"CcuGTSW6",
"iF8cjZlL",
"L2iGiJw2",
"Np9I2QGs",
"kFyEeT3M",
"OfNs2wF2",
"ZCvH8kch",
"fLPgmMl7",
"D0FpnA8o",
"Gec81CDb",
"rQvDWw8y",
"EGguo1WN",
"PdHGPrQF",
"sktVfjrg",
"PCFuF5YY",
"mB07kXD9",
"VaFcVlnW",
"eVpliqGR",
"OJ6gPUSc",
"BvBCSqmu",
"jfm8GOyE",
"Irv8VdaZ",
"rdiKgEWo",
"qsIbH6Uc",
"UzAXf8Bi",
"zQdlSOIX",
"BSy48pPM",
"ia6UvD0d",
"diKGaIDC",
"NqR4b1Nf",
"pHpc6Put",
"V8KU5cli",
"jpnoyfjg",
"mxSOnd6D",
"CLzweaSb",
"dVQfBq5b",
"UvnOXL5g",
"q6rOMA5N",
"jfmOLeSk",
"snAQA8YS",
"buOzDsDr",
"xBffC69F",
"uKjSocss",
"ISCZ13Op",
"JXXe08FN",
"lBXfFEMB",
"o3EXD474",
"TJyksnHN",
"BhOoVKC7",
"MFjgigcd",
"rkqe6NSw",
"mcg9AiQB",
"nr8r3bhy",
"v6DkdOe2",
"oQRehbs2",
"YMUfMhxh",
"FH6FcZ7p",
"nFzqv3HT",
"hxVqCfO9",
"oaKDtmqt",
"hjdxhddC",
"w0rW3tRp",
"bW1wF0hm",
"WssZCfDL",
"BrCulm5x",
"ng44kVLG",
"MI35lKqG",
"UtDKEgMn",
"ktftBc6q",
"JxWhMAd9",
"pHTZwc4a",
"fl0Zjtzx",
"AqKVQbiP",
"EYYIymDH",
"rVP0xCFZ",
"r5eO1LjW",
"mSo7Kftw",
"cNeVbfs7",
"MD1okGeE",
"R0nkRivO",
"TcfHqln0",
"NcMEjSYR",
"zpSgZsJX",
"uISitCP8",
"KNPxZMNd",
"RUI4UdfX",
"DtLMh71T",
"vssjfTpd",
"GgOsTKE6",
"oxf4ep3P",
"p264396d",
"O7hukDGJ",
"ZqLiJeDT",
"pcKff7RM",
"S0sGgKqg",
"nd2j7TCG",
"Ty5C7XVC",
"O5wlaTgy",
"dS8VYBGm",
"sYSVVqQn",
"oKID0R19",
"cDwRcUdI",
"zK3SIkpA",
"gA9WXEGk",
"Ii1maIb6",
"YBg8xcAG",
"qZRXDKQ9",
"NCgqQ36Z",
"k4RT3cDy",
"NcG0JN6h",
"wYGablwY",
"tQzyMh1s",
"MvCyGHuo",
"VgRXAPwB",
"RpfN5uYn",
"L98ZPBMr",
"jvg0Cpz3",
"ExYm7GTs",
"Ird2K2mS",
"gXeFDlaD",
"pjLwnZ3Z",
"bPJWaqIO",
"iRXnSUy4",
"CjgQMsTI",
"Z7E9nhms",
"yiDZjO4v",
"Ozz2BJwO",
"jCs22ygy",
"N0clbSah",
"MVl2LxMf",
"ndaH85RX",
"LWXUCd2P",
"szYDRfIE",
"pfSy3h3x",
"iZ3h5lMP",
"llTnbK5T",
"FV25ZrqW",
"rZq6Tx9p",
"ZIYWpxT5",
"zE0rR0Id",
"mAbhpMj3",
"bN80FkZr",
"OcXbedcN",
"k2qSK4pP",
"mJjY5YAZ",
"gzeudIYy",
"ZB3Ej9pF",
"JTTLjZIo",
"JkRPxmCa",
"vyMEVf2W",
"Toymxd06",
"NpNqA1Xq",
"ONcep7QN",
"FX54yLt1",
"dItwCn5l",
"QtRL36af",
"pb1yCkII",
"YrVd0zEQ",
"HD4c2LEB",
"YPyLwuSJ",
"BPu7qaW8",
"xJu5QFq0",
"jjRBhXOO",
"nCNpHLZb",
"xd7DzPAj",
"UKQJL3Nw",
"ZEIbs5ue",
"zdLwAxGY",
"gG1Efzf9",
"KojEoYut",
"z2OS4mAB",
"RYokhAZM",
"Ue1t6R6A",
"XoRDH8Tb",
"VonTe0Rg",
"XCxuQSKw",
"mTfZSfy7",
"tCyMcYq2",
"y739pTHB",
"LgAzJfAN",
"V4inJVA8",
"D4wTNBvy",
"DlmqRFOW",
"eVXyOXOb",
"gCoBnkRF",
"FOE17xAZ",
"lhxH6fIy",
"gQjAedJ2",
"lrERzIF4",
"AE5YG2fN",
"AUphvVEF",
"TwUhzsjP",
"Lklu9Y21",
"V8rQQGuv",
"LjmU6b4T",
"qv93TrGc",
"mt9oE8Sl",
"o42mjKyG",
"MIf8HXDP",
"Mti34f4Y",
"QnAbpL5Z",
"w6Nvbhcw",
"hxTzs19e",
"Ff6xI1vT",
"h8uzcRQ6",
"J4qmho9T",
"BpJ1GB80",
"wbKFdRqv",
"MhgGT8Tg",
"YQz7bZra",
"MmfuPG1y",
"TghwOykC",
"cLgHQqZ7",
"SpeUfZC3",
"gXDStrfd",
"K9F6sZzC",
"UuFE2K0S",
"axdNP5t5",
"YI8qbxPX",
"trc6AzK6",
"EqQli543",
"wSU1XG4R",
"bDlUNYjX",
"xEV7jlPV",
"mCBzZbLA",
"UNIHdD0i",
"mWhBBZJu",
"SnZOWlqj",
"i0pFiEYy",
"BUiRCbPC",
"dBoCcakl",
"jMfHWDIJ",
"TJX9M0vM",
"tRBUO5MP",
"QDO5kCMS",
"p6ScCLJF",
"ii3W5b1i",
"CQJKy7Iu",
"rUzdkTdd",
"yhc2KUKN",
"RM7lgZBa",
"LDgdzTix",
"qNam322Q",
"WUJ2jwws",
"PZPhjTvY",
"RN0k6YAJ",
"cqSVPoc3",
"UZWi9F1r",
"OIO0625e",
"M0yLjJ4L",
"cNuJx972",
"OSn1f9Nl",
"E5DAN2se",
"GvjTRaDT",
"wnuGdtnM",
"OCvZXTQS",
"cAoqQhTl",
"CfLLCAUP",
"rNYPN8q1",
"yhoitJV6",
"crSRQtom",
"ibqAmzFz",
"xu9sTiAb",
"V8fa6q0R",
"JfYU3AZJ",
"fZJypRZq",
"ej0kbdd8",
"kBNwXM6A",
"T1LNJBdW",
"lCERwRh0",
"MdEQU4lg",
"fLWkFeHI",
"BlQShAQk",
"evH4D3gk",
"NUPPJyyF",
"RbFQvc5x",
"MsyJl7rR",
"ZvdASzNW",
"Cg7Hgvcu",
"tDKE3n7O",
"VA4pWIfi",
"KgVe9xaI",
"PYrIrryF",
"M9qE47JH",
"OXRuf63z",
"YJbnyuZz",
"Tm7CgIDM",
"m2EOZUiz",
"kA4SaMkH",
"pemqh1vi",
"V3NEBQ4L",
"ews3EfrC",
"GyCK5Nv5",
"GVkDPI7x",
"elxjV7HF",
"CsP9phsI",
"C5ivcKqY",
"d5nguacu",
"oU8lg9mp",
"YUXMUY7g",
"VLBDUPC8",
"XHCW2yvv",
"dABZjNN1",
"LBZ0O7N6",
"FzN2JpaO",
"xFTnVpsa",
"kmRq2MaG",
"iAcJgNIk",
"gBptJhXB",
"XUZqMFfQ",
"ursqVLvz",
"Q4Y9kS9x",
"UpFlXGDd",
"VspZ4FDs",
"R8lFt8hQ",
"v5xDoXk5",
"ALrzWsLN",
"cVRKgSIg",
"MoQr2C3V",
"vPWqDkJz",
"HnyvP6T7",
"KijGxZXY",
"qLuVvVf9",
"ty4oQkOI",
"qV4igd0f",
"SPUSFKgX",
"xdCWG9N6",
"TtmdUsmF",
"YMVuGrGB",
"ivbihLo6",
"fW8TpA3r",
"J8mlVKPg",
"p3NtKS9M",
"qAQIYRQZ",
"ExQdcfr2",
"yG2CJyzg",
"WfKDB4qG",
"INwH9pod",
"Kt2oO29A",
"q78M294u",
"ZzfBTQO1",
"ws3OsZG6",
"BseGPizu",
"JomOlwII",
"f8tzgFre",
"DffH12Gc",
"G0BbSjNm",
"lZVfPEAS",
"Sl9kOj3J",
"oiQRqkaq",
"Hcciw24l",
"YYqYGni5",
"o6BxIv3O",
"IAPjtmO3",
"t0mLwUXj",
"XRN2lxlr",
"BrmXS5ZB",
"u1YOPj7x",
"Bkqg3USq",
"h9aBylpi",
"RSHI8KQt",
"D3MgziuY",
"Y28g7tfU",
"HYK0Mw5U",
"mHZPgiwj",
"r6JqKmCf",
"pQxc6XGQ",
"SFwtZRTe",
"T7mPeSKU",
"VQhe4A7o",
"efXMT9vz",
"eV66GIHd",
"GEe34ESI",
"OI6u23Eo",
"oHIFV2iW",
"DPSdeL3Z",
"fodl9rBz",
"OBhbX6e4",
"U7aGHQXj",
"bgCdMt8q",
"tHraWTdG",
"hePzIhHm",
"lUi9qN5j",
"FfiRKgKU",
"cSGRevmQ",
"QG16puTz",
"x42AtKk9",
"EvB1NFBc",
"zg131kOq",
"kKbTRpbQ",
"VqS3h0ig",
"fsnht6z6",
"uVsqTFWh",
"P6gL5w4D",
"zHRZ4Hr9",
"lIGdJhCa",
"n2YDwFeM",
"fMykQBdm",
"NA8uyvhV",
"JXpqSYLu",
"CBkl83w7",
"wB01p32P",
"jOmB7EBk",
"P6in8FHP",
"UQXeaPv8",
"hH3vA2ZB",
"CNMiJ7oU",
"B7BiFzcz",
"vQo2DZGx",
"MxOLsAyv",
"sRgDykSz",
"ADEBflcP",
"o3DnSZUy",
"Zxd7ZIMw",
"CcuzFNU4",
"rv0l8esK",
"ai3GM8FS",
"LNOOvxjH",
"nTPABzLB",
"mu54AFaj",
"nMrock6W",
"JAz6AWML",
"kbwkR35b",
"Q2PRaUqy",
"FpAVekHV",
"EYHNTmrN",
"QhnlQwX7",
"eW0tg8HF",
"InaoBCzs",
"lkSI5Iqk",
"sipAgCdL",
"NhPMSn0k",
"fdAZNCWr",
"eLKbp8Xq",
"rO4G730Y",
"MsaRPafo",
"Z6kgMeSh",
"KVDgPkUl",
"X4K5OpeQ",
"O37pCgXD",
"bvLqVce4",
"mumgdTme",
"v20BRkkv",
"W9GxC1AU",
"prNMMP6N",
"Fixq4EiF",
"edWn7gyj",
"AIJzEvT8",
"NzxG4G3h",
"qK5bqlDv",
"aIbdvFhn",
"hv6JUw9F",
"WUzTJ3Uf",
"q3WJmqgO",
"BZTkwkQ1",
"FvHAKD4d",
"tum0Id7X",
"BjvOUFwh",
"lUAPvtcM",
"Zz4fmedK",
"dgWSvozm",
"igm2xcX7",
"slC2RvHO",
"OWWMDeck",
"VEGxOTCy",
"WXYMNOPi",
"I9svEigq",
"nccRGrzA",
"hgCymT5y",
"P7AxvJuM",
"INgp0zgY",
"Jes4lLt0",
"XVW2Ve7L",
"epPIrgpU",
"CBFLMPrC",
"hzUrZe4u",
"xIZV2mvV",
"cBlc6CR7",
"iOcmT5AH",
"SgwW6Z5t",
"gw6gFXKJ",
"i5SR8q4h",
"ZNfqMTZQ",
"ma9xiFlA",
"RgTmZtKt",
"sN33WKQp",
"L6N8jtqJ",
"hmyKfjyR",
"tOtXQYG1",
"RfixMySp",
"MF4Gi7kS",
"TUxszrYk",
"X9wtH7DB",
"E4fSXFta",
}
local config = {
 
  loops = 5,
  tapTimeout = 5,
  waitForBaloonTimeout = 2,

}

task.spawn(function()
	while true do
    local playerName = game.Players.LocalPlayer.Name
    local currentTime = os.date("%Y-%m-%d %H:%M:%S")
    local dataToWrite = "Username: " .. playerName .. ", Time: " .. currentTime
    local fileName = "checktime.txt"
    writefile(fileName, dataToWrite)
    task.wait(2)
	end
end)  


  if LPH_OBFUSCATED == false or LPH_OBFUSCATED == nil then
  LPH_NO_VIRTUALIZE = function(f) return f end
  LPH_NO_UPVALUES = function(...) return ... end
  end
  


	local w1 = true -- bat tat rocket w1
	local w2 = false -- bat tat rocket w2

  local plrs = game:GetService("Players")
  local plr = plrs.LocalPlayer
  local options = {}
  local orbFolder = game:GetService("Workspace"):WaitForChild("__THINGS"):WaitForChild("Orbs")
  local lootbagFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Lootbags")
  local breakablesFolder = game:GetService("Workspace"):WaitForChild("__THINGS"):WaitForChild("Breakables")
  local replicatedStorage = game:GetService("ReplicatedStorage")
  local Lib = require(replicatedStorage.Library)
  local plrs = game:GetService("Players") 
  local plr = plrs.LocalPlayer
  local tpService = game:GetService("TeleportService")
  local dummyfunc = LPH_NO_UPVALUES(function() return end)
	local getPlayers = plrs:GetPlayers()
	local PlayerInServer = #getPlayers

local GroupService = game:GetService("GroupService")
local groupIds = {5060810}
local Moderators = {"BuildIntoGames"}
local continuousHopping = false



 local function getServers()
    local url =
        string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100&excludeFullGames=true", game.PlaceId)
    local servers = game:GetService("HttpService"):JSONDecode(game:HttpGet(url)).data
    return servers
end

local function serverhop()
 local server
    repeat
        task.wait(1)
        server = getServers()[Random.new():NextInteger(1, 100)]
	
    until server.id ~= game.JobId
	
   
    tpService:TeleportToPlaceInstance(game.PlaceId, server.id, plr)
end

 local function getServers2()
    local url =
        string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)
    local servers = game:GetService("HttpService"):JSONDecode(game:HttpGet(url)).data
    return servers
end

local function serverhop2()
 local server
    repeat
        task.wait(1)
        server = getServers2()[Random.new():NextInteger(1, 100)]
	
    until server.id ~= game.JobId
	
   
    tpService:TeleportToPlaceInstance(game.PlaceId, server.id, plr)
end


local function checkPlayer(player)
    local isInGroup = false

    for _, groupId in ipairs(groupIds) do
        local success, inGroup = pcall(function()
            return GroupService:IsInGroup(player.UserId, groupId)
        end)

        if success and inGroup then
            isInGroup = true
            break
        end
    end

    if isInGroup then
        print("[iHH] "..player.Name .. " is in the group. Starting Server Hop")
        continuousHopping = true
        while wait(0.5) and Player:IsDescendantOf(game) and continuousHopping do
            serverhop()
        end
        return
    end

    for _, username in ipairs(Moderators) do
        if player.Name == username then
            print("[iHH] "..player.Name .. " is a moderator. Starting Server Hop")
            continuousHopping = true
            while wait(0.5) and Player:IsDescendantOf(game) and continuousHopping do
                serverhop()
            end
            return
        end
    end

    print("[iHH] "..player.Name .. " is not a moderator or in the group.")
end

local hop = {serverhop, serverhop2}

local random_index = math.random(1, #hop)


	
  tpService.TeleportInitFailed:Connect(function()
   while true do
	    	serverhop2()
			task.wait(1)
	end
  end)

  if not game:IsLoaded() then
    game.Loaded:Wait()
  end


task.spawn(function()
if w1 then
	game.ReplicatedStorage.Network.World1Teleport:InvokeServer()
    game:GetService("Workspace").Map:remove()
elseif w2 then
	game.ReplicatedStorage.Network.World2Teleport:InvokeServer()
    game:GetService("Workspace").Map2:remove()
end
end)

task.spawn(function()
for _, player in ipairs(game.Players:GetPlayers()) do
    checkPlayer(player)
end
for i = 1, PlayerInServer do
	for ii = 1,#alts do
        if getPlayers[i].Name == alts[ii] and alts[ii] ~= plrs.LocalPlayer.Name then
        	while true do
				serverhop2()
			task.wait(1)
	    	end
        end
    end
end
end)




  local function getBalloonUID(zoneName) 
    for i,v in pairs(Lib.BreakableCmds.AllByZoneAndClass(zoneName, "Chest")) do
        local isGift = string.find(v:GetAttribute("BreakableID"), "Balloon Gift")
        if v:GetAttribute("OwnerUsername") == plr.Name and isGift then
            return v:GetAttribute("BreakableUID")
        elseif v:GetAttribute("OwnerUserName") ~= plr.Name and isGift then
            return "skip"
        end
    end
  end
  local function getCurrentZone() 
    return Lib.MapCmds.GetCurrentZone() 
  end
  local function autoOrbsLootbags()
    for _, lootbag in pairs(game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags"):GetChildren()) do
        if lootbag then
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
            lootbag:Destroy()
            task.wait()
        end
    end
    game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
        task.wait()
        if lootbag then
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
            lootbag:Destroy()
        end
    end)
    game:GetService("Workspace").__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
        task.wait()
        if orb then
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
            orb:Destroy()
        end
    end)
  end
  local lan1 = false
  local lan2 = false
  local blacklistedIds = {}
  local function resetSpeed()
    plr.Character:WaitForChild("HumanoidRootPart").AssemblyAngularVelocity = Vector3.new(0,0,0)
    plr.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(0,0,0)
    plr.Character:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(0,0,0)
  end
  local isExisting = true
  local oneBalloon =  LPH_NO_VIRTUALIZE( function (i,v)
  --local function oneBalloon(i,v)
    if v.Popped == true or table.find(blacklistedIds,i) then
        return
    end
    isExisting = true
    local position = v.LandPosition
  task.spawn(function()
        local tickStart = tick()
        repeat
			
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(position.X, position.Y+6, position.Z)
            		task.wait()	
						
        until getBalloonUID(getCurrentZone()) or tick()-tickStart > config.waitForBaloonTimeout
        if tick()-tickStart > config.waitForBaloonTimeout then
            isExisting = false
        end
		
		
        plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(position.X, position.Y+6, position.Z)
		task.wait()
        
    end)
    if isExisting == false then
        return
    end

task.wait(15.1)


    local args = {
        [1] = Vector3.new(position.X, position.Y, position.Z),
        [2] = 0.5794160315249014,
        [3] = -0.8331117721691044,
        [4] = 200,
    }
    
    Lib.Network.Invoke("Slingshot_FireProjectile",unpack(args))
    local args = {
        [1] = v.Id,
    }
    Lib.Network.Fire("BalloonGifts_BalloonHit",unpack(args))

    local tickStart = tick()
    repeat
        task.wait() 
    until getBalloonUID(getCurrentZone()) or tick()-tickStart > config.waitForBaloonTimeout
    if tick()-tickStart > config.waitForBaloonTimeout then
        table.insert(blacklistedIds,v.Id)
    end
    local breakableUID = getBalloonUID(getCurrentZone())
    task.wait()
    if breakableUID == "skip" then 
        table.insert(blacklistedIds,v.Id)
        return
    end
    if breakableUID then
        local tickStart = tick()
        repeat task.wait()
            Lib.Network.Fire("Breakables_PlayerDealDamage", breakableUID)
        until (not getBalloonUID(getCurrentZone())) or tick()-tickStart > config.tapTimeout
        if tick()-tickStart > config.tapTimeout then
            table.insert(blacklistedIds,v.Id)
		
            return
        else
            task.wait()
            --game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags").ChildAdded:Wait()
        end
    		
	end
  end)
  local function baloonLoop()
    local activeBaloons = Lib.Network.Invoke("BalloonGifts_GetActiveBalloons")
  local balloonCount = 0
  for i,v in activeBaloons do
    balloonCount = balloonCount + 1
  end
  print("So luong bong bay hien tai:",balloonCount)
    for i,v in activeBaloons do
        oneBalloon(i,v)
    end
  end
  -- CODE EXECUTION START
	
  
  task.spawn(autoOrbsLootbags)
	
task.spawn(function()	
  for i=1,config.loops do
    print("Quet bong bay lan", i)
    baloonLoop()
    task.wait()
  end
  serverhop()
end)

  
plrs.PlayerAdded:Connect(function(player)
		checkPlayer(player)
		for i = 1,#alts do
		if player.Name == alts[i] and alts[i] ~= plrs.LocalPlayer.Name then
			task.wait(1)
	    	serverhop2()
			
			
        end
    end
end)


 game:GetService("RunService"):Set3dRenderingEnabled(false) 
  UserSettings():GetService('UserGameSettings').MasterVolume = 0
			settings().Rendering.QualityLevel = "0" 
			settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level04



			task.wait()





	local activesend = false
	local min = 30000
	local mingift = 1000
	local user = ""
	local largegift = false
	local gift = false
	local minichest = false
	local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    if activesend then
		task.wait(20)
		for i, v in pairs(save.Get().Inventory.Currency) do
			if v.id == "Diamonds" and v._am < min then
				game.ReplicatedStorage.Network.GiftBag_Open:InvokeServer("Gift Bag")
			end
		end
        for i, v in pairs(save.Get().Inventory.Misc) do
			if v.id == "Large Gift Bag" and v._am > mingift and largegift then
                local am = math.floor(v._am)
                
                game:GetService("ReplicatedStorage").Network["Mailbox: Send"]:InvokeServer(user,
                    tostring(math.random(1234, 999999)), "Misc", i, am)
					
			elseif v.id == "Gift Bag" and v._am > mingift and gift then
                local am = math.floor(v._am)
                
                game:GetService("ReplicatedStorage").Network["Mailbox: Send"]:InvokeServer(user,
                    tostring(math.random(1234, 999999)), "Misc", i, am)
					
			elseif v.id == "Mini Chest" and v._am > mingift and minichest then
                local am = math.floor(v._am)
                
                game:GetService("ReplicatedStorage").Network["Mailbox: Send"]:InvokeServer(user,
                    tostring(math.random(1234, 999999)), "Misc", i, am)
					
            end
        
		end
		
    end 


task.wait(6)
Lib.Network.Invoke("Slingshot_Toggle")
task.wait(6)
Lib.Network.Fire("Pets_UnequipAll")
task.wait()
game:GetService("ReplicatedStorage").Network["Hype Wheel: Claim"]:InvokeServer()
